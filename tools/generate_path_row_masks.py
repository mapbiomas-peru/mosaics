
import ee

ee.Initialize()

assetScenes = "projects/mapbiomas-workspace/AUXILIAR/cenas-landsat"
assetOutput = "projects/mapbiomas-workspace/AUXILIAR/landsat-mask"

collectionId = "LANDSAT/LT05/C01/T1_SR"
# collectionId = "LANDSAT/LC08/C01/T1_SR"

version = '2'

collection = ee.ImageCollection(collectionId)\
    .filterDate('1985-01-01', '2011-12-31')

scenes = ee.FeatureCollection(assetScenes)

outputCollection = ee.ImageCollection(assetOutput)\
    .filterMetadata('version', 'equals', version)

readyTiles = outputCollection.reduceColumns(ee.Reducer.toList(), ['tile'])\
    .get('list')\
    .getInfo()

# tiles brazil
# tiles = scenes.reduceColumns(ee.Reducer.toList(), ['TILE_T']).get('list')
# tiles = map(lambda tile: tile[1:], tiles.getInfo())
tiles = ['006066']

# pampa trinacional tiles
# tiles = [
#     "220080","220081","220082","221080","221081","221082","221083","221084",
#     "222079","222080","222081","222082","222083","222084","223079","223080",
#     "223081","223082","223083","223084","223085","223086","223087","224079",
#     "224080","224081","224082","224083","224084","224085","224086","224087",
#     "225079","225080","225081","225082","225083","225084","225085","225086",
#     "225087","226081","226082","226083","226084","226085","226086","226087",
#     "227081","227082","227083","227084","227085","227086","227087","228081",
#     "228082","228083","228084","228085","228086","228087","229081","229082",
#     "229083","229084","229085","229086","230082","230083","230084","230085",
#     "230086","231084","231085"
# ]

# # mata atlantica trinacional
# tiles = [
#     "223078","223079","224076","224077","224078","224079","224080","225075",
#     "225076","225077","225078","225079","226075","226076","226077","226078"
# ]

# raisg
# tiles = [
#     "001053", "001054", "001055", "001056", "001057", "001058", "001060", "001067",
#     "001068", "001069", "001070", "001071", "001072", "001073", "001074", "001075",
#     "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002060",
#     "002067", "002068", "002069", "002070", "002071", "002072", "003054", "003055",
#     "003056", "003057", "003058", "003059", "003067", "003068", "003069", "003070",
#     "003071", "003072", "004053", "004054", "004055", "004056", "004057", "004058",
#     "004059", "004060", "004061", "004062", "004063", "004066", "004067", "004068",
#     "004069", "004070", "004071", "004072", "005052", "005053", "005056", "005057",
#     "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005066",
#     "005067", "005068", "005069", "005070", "005071", "006053", "006054", "006055",
#     "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063",
#     "006064", "006065", "006066", "006068", "006069", "006070", "007051", "007052",
#     "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060",
#     "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068",
#     "007069", "007070", "008052", "008053", "008054", "008055", "008056", "008057",
#     "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065",
#     "008066", "008067", "008068", "009052", "009053", "009054", "009055", "009056",
#     "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064",
#     "009065", "009066", "000053", "010055", "010058", "010059", "010060", "010061",
#     "010063", "010064", "010065", "011054", "011055", "011062", "011063", "018060",
#     "227057", "227058", "227059", "227072", "227073", "227074", "228056", "228057",
#     "228058", "228059", "228071", "228072", "228073", "228074", "229056", "229057",
#     "229058", "229059", "229070", "229071", "229072", "229073", "229074", "229075",
#     "229076", "230057", "230058", "230059", "230069", "230070", "230071", "230072",
#     "230073", "230074", "230075", "230076", "231056", "231057", "231058", "231059",
#     "231069", "231070", "231071", "231072", "231073", "231074", "231075", "231076",
#     "232056", "232057", "232058", "232068", "232069", "232070", "232071", "232072",
#     "232073", "232074", "232075", "232076", "233054", "233055", "233056", "233057",
#     "233058", "233059", "233067", "233068", "233069", "233070", "233071", "233072",
#     "233073", "233074", "233075", "233076"
# ]

# indonesia
# tiles = [
#     "099064","099065","099066","099067","100062","100063","100064","100065","100066","101062","101063",
#     "101064","101065","101066","102061","102062","102063","102064","102068","103061","103062","103063",
#     "103068","104061","104062","104063","104064","104065","105061","105062","105063","105064","106060",
#     "106061","106062","106064","106065","106066","106068","107060","107061","107062","107063","108060",
#     "108061","108062","108066","109058","109059","109060","109061","109062","109063","109065","109066",
#     "110058","110059","110060","110061","110062","110063","110065","110066","110067","111058","111059",
#     "111061","111066","111067","111068","112056","112059","112060","112061","112062","112063","112064",
#     "112066","112067","113056","113059","113060","113061","113062","113063","113064","113065","113066",
#     "113067","114055","114056","114059","114060","114061","114062","114063","114064","114066","114067",
#     "115056","115057","115059","115060","115061","115062","115066","116056","116057","116058","116059",
#     "116060","116061","116062","116063","116065","116066","117054","117055","117056","117057","117058",
#     "117059","117060","117061","117062","117063","117065","117066","118054","118055","118056","118057",
#     "118058","118059","118060","118061","118062","118065","118066","119056","119057","119058","119059",
#     "119060","119061","119062","119065","119066","120058","120059","120060","120061","120062","120064",
#     "120065","120066","121058","121059","121060","121061","121062","121064","121065","122059","122060",
#     "122062","122064","122065","123057","123061","123062","123063","123064","123065","124058","124060",
#     "124061","124062","124063","124064","125058","125059","125060","125061","125062","125063","126056",
#     "126057","126058","126059","126060","126061","126062","127055","127056","127057","127058","127059",
#     "127060","127061","127062","128054","128055","128056","128057","128058","128059","128060","128061",
#     "129054","129055","129056","129057","129058","129059","129060","130054","130055","130056","130057",
#     "130058","131056","131057"
# ]

for tile in list(tiles):

    if int(tile) not in readyTiles:

        path = int(tile[:3])
        row = int(tile[3:])

        print(int(path), int(row))

        subCollection = collection\
            .filterMetadata('WRS_PATH', 'equals', path)\
            .filterMetadata('WRS_ROW', 'equals', row)

        centroids = subCollection \
            .map(
                lambda image: image.geometry().centroid()
            )

        centroids = ee.FeatureCollection(centroids)

        centroid = centroids.geometry().centroid()

        azimuth = collection.aggregate_mean('SUN_AZIMUTH')

        centroidCoords = centroid.coordinates()
        centroidX = ee.Number(centroidCoords.get(0))
        centroidY = ee.Number(centroidCoords.get(1))

        centroidYTest = abs(centroidY.getInfo())

        if (centroidYTest < 10):
            distanceX = 111
        elif (centroidYTest < 20):
            distanceX = 109
        elif (centroidYTest < 30):
            distanceX = 107
        else:
            distanceX = 105

        deltaX = 85/distanceX
        deltaY = 85/111

        bounds = [
            [centroidX.subtract(deltaX), centroidY.subtract(deltaY)],
            [centroidX.add(deltaX), centroidY.subtract(deltaY)],
            [centroidX.add(deltaX), centroidY.add(deltaY)],
            [centroidX.subtract(deltaX), centroidY.add(deltaY)],
            [centroidX.subtract(deltaX), centroidY.subtract(deltaY)]
        ]

        def rotate(coord):

            x = ee.Number(ee.List(coord).get(0)).subtract(centroidX)
            y = ee.Number(ee.List(coord).get(1)).subtract(centroidY)

            theta = ee.Number(-0.2)

            xr = x.multiply(theta.cos()).subtract(y.multiply(theta.sin()))
            yr = x.multiply(theta.sin()).add(y.multiply(theta.cos()))

            return ee.List([
                xr.add(centroidCoords.get(0)),
                yr.add(centroidCoords.get(1))
            ])

        rotatedCoords = ee.List(bounds).map(rotate)

        rotatedPolygon = ee.Geometry.Polygon(ee.List([rotatedCoords]))

        mask = ee.Image().paint(
            featureCollection=ee.FeatureCollection(rotatedPolygon),
            color=1
        )

        region = rotatedPolygon \
            .buffer(5000) \
            .bounds() \
            .coordinates() \
            .getInfo()

        tileId = path * 1000 + row

        task = ee.batch.Export.image.toAsset(
            image=mask.set('tile', tileId).set('version', version),
            description=str(tileId),
            assetId=assetOutput + '/' + str(tileId) + '-' + version,
            region=region,
            scale=30,
            maxPixels=int(1e13)
        )

        task.start()
